//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Codific.Mvc567.Cli.Templates.ProjectInit {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class GitIgnoreTemplate : GitIgnoreTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("## Ignore Visual Studio temporary files, build results, and\n## files generated by" +
                    " popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/" +
                    "gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.s" +
                    "uo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xam" +
                    "arin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build resu" +
                    "lts\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Aa][Rr][Mm]/\n[" +
                    "Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/opt" +
                    "ions directory\n.vs/\n# Uncomment if you have tasks that create the project\'s stat" +
                    "ic files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerat" +
                    "ed\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*" +
                    ".VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[" +
                    "Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifact" +
                    "s/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# Style" +
                    "Cop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*" +
                    ".meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n" +
                    "*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog" +
                    "\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*" +
                    ".ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studi" +
                    "o profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS " +
                    "2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper " +
                    "is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# Jus" +
                    "tCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*" +
                    "\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage T" +
                    "ool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n" +
                    "*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*" +
                    "\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Ins" +
                    "tallshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator " +
                    "add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProj" +
                    "ect/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2" +
                    "\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[" +
                    "Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin" +
                    " your web deploy settings,\n# but database connection strings (with potential pas" +
                    "swords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App pu" +
                    "blish settings. Comment the next line if you want to\n# checkin your Azure Web Ap" +
                    "p publish settings, but sensitive information contained\n# in these scripts will " +
                    "be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages" +
                    "\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp" +
                    "]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/" +
                    "build/\n# Uncomment if necessary however generally it will be regenerated when ne" +
                    "eded\n#!**/[Pp]ackages/repositories.config\n# NuGet v3\'s project.json files produc" +
                    "es more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build O" +
                    "utput\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store " +
                    "app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAss" +
                    "ociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cach" +
                    "e files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of d" +
                    "irectories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*." +
                    "dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including " +
                    "strong name files can present a security risk\n# (https://github.com/github/gitig" +
                    "nore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, un" +
                    "comment next line to ignore bower_components\n# (https://github.com/github/gitign" +
                    "ore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight proj" +
                    "ects\nGenerated_Code/\n\n# Backup & report files from converting an old project fil" +
                    "e\n# to a newer Visual Studio version. Backup files are not needed,\n# because we " +
                    "have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServ" +
                    "iceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business" +
                    " Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser" +
                    "\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Micr" +
                    "osoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# N" +
                    "ode.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio" +
                    " 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Stu" +
                    "dio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n" +
                    "\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/" +
                    "*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Ser" +
                    "ver/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket de" +
                    "pendency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeR" +
                    "ush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__py" +
                    "cache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packa" +
                    "ges.config\n\n# Tabs Studio\n*.tss\n\n# Telerik\'s JustMock configuration file\n*.jmcon" +
                    "fig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI " +
                    "analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalR" +
                    "un/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger " +
                    "configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working fol" +
                    "der\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse he" +
                    "althcheck temp database\nhealthchecksdb\n\n# Rider or JetBrains IDEs\n.idea/\n\n# Back" +
                    "up folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBack" +
                    "up/\n\n# App Settings\n*appsettings.*\n!appsettings.Sample.json\nwwwroot/dist/\nsrc/Ap" +
                    "plication/wwwroot/dist\n\n# OSX specific\n.DS_Store\nsrc/Application/.DS_Store\n\n# Ge" +
                    "nerator json\ngenerator.json\n");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class GitIgnoreTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
