//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Codific.Mvc567.Cli.Templates.ProjectInit {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class GulpFileTemplate : GulpFileTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("/// <binding BeforeBuild=\'vue:build\' />\nlet gulp = require(\"gulp\"),\n    uglify = " +
                    "require(\'gulp-uglify-es\').default,\n    inject = require(\'gulp-inject-string\'),\n " +
                    "   replace = require(\'gulp-replace\'),\n    rename = require(\'gulp-rename\'),\n    c" +
                    "oncat = require(\'gulp-concat\'),\n    jsObfuscator = require(\'gulp-javascript-obfu" +
                    "scator\'),\n    sass = require(\'gulp-sass\'),\n    cssmin = require(\'gulp-cssmin\');\n" +
                    "\nconst componentsDirectory = \'Scripts/VueComponents/\';\nconst csHtmlResultDirecto" +
                    "ry = \'Views/Components/Vue\';\n\ngulp.task(\'sass\', function () {\n    return gulp.sr" +
                    "c(\'Styles/scss/**/*.scss\')\n        .pipe(sass())\n        .pipe(gulp.dest(\'Styles" +
                    "/css\'));\n});\n\ngulp.task(\'min:css\', [\'sass\'], function () {\n    return gulp.src(\'" +
                    "Styles/css/style.css\')\n        .pipe(cssmin({ keepSpecialComments: 0 }))\n       " +
                    " .pipe(concat(\'style.min.css\'))\n        .pipe(gulp.dest(\'wwwroot/assets/css\'));\n" +
                    "});\n\ngulp.task(\'vue:vendors\', function () {\n    return gulp.src([\n        \'node_" +
                    "modules/vue/dist/vue.min.js\',\n        \'node_modules/vue-router/dist/vue-router.m" +
                    "in.js\',\n        \'node_modules/axios/dist/axios.min.js\',\n        \'node_modules/vu" +
                    "elidate/dist/vuelidate.min.js\',\n        \'node_modules/vuelidate/dist/validators." +
                    "min.js\',\n        \'node_modules/vue-cookies/vue-cookies.js\',\n        \'node_module" +
                    "s/vue-i18n/dist/vue-i18n.min.js\'\n    ])\n        .pipe(uglify())\n        .pipe(in" +
                    "ject.prepend(\'<script type=\"text/javascript\">\'))\n        .pipe(inject.append(\'</" +
                    "script>\'))\n        .pipe(replace(\'@\', \'@@\'))\n        .pipe(concat(\'_VueVendors.c" +
                    "shtml\'))\n        .pipe(gulp.dest(csHtmlResultDirectory));\n});\n\ngulp.task(\'vue:co" +
                    "mponents\', function () {\n    return gulp.src(componentPath(\'*\'))\n        .pipe(u" +
                    "glify())\n        .pipe(jsObfuscator())\n        .pipe(inject.prepend(\'<script typ" +
                    "e=\"text/javascript\">(function(){\"use strict\";\'))\n        .pipe(inject.append(\'})" +
                    "();</script>\'))\n        .pipe(replace(\'@\', \'@@\'))\n        .pipe(rename({\n       " +
                    "     prefix: \"_\",\n            suffix: \".Vue\",\n            extname: \".cshtml\"\n   " +
                    "     }))\n        .pipe(gulp.dest(csHtmlResultDirectory));\n});\n\ngulp.task(\'styles" +
                    "\', [\'min:css\']);\ngulp.task(\'vue:build\', [\'vue:vendors\', \'vue:components\']);\n\ncon" +
                    "st componentPath = function (name = \'*\') {\n    return componentsDirectory + name" +
                    " + \'.js\';\n};");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class GulpFileTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
