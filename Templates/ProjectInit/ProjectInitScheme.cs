//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Codific.Mvc567.Cli.Templates.ProjectInit {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class ProjectInitScheme : ProjectInitSchemeBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("{\n  \"scheme\": [\n    {\n      \"type\": \"folder\",\n      \"name\": \"{{ProjectName}}\",\n  " +
                    "    \"content\": [\n        {\n          \"type\": \"file\",\n          \"name\": \"cli-conf" +
                    "ig.json\",\n          \"templateName\": \"CliConfigTemplate\"\n        },\n        {\n   " +
                    "       \"type\": \"file\",\n          \"name\": \"generator.json\",\n          \"templateNa" +
                    "me\": \"GeneratorConfigTemplate\"\n        },\n        {\n          \"type\": \"file\",\n  " +
                    "        \"name\": \".gitignore\",\n          \"templateName\": \"GitIgnoreTemplate\"\n    " +
                    "    },\n        {\n          \"type\": \"file\",\n          \"name\": \"{{ProjectName}}.sl" +
                    "n\",\n          \"templateName\": \"ProjectSolutionTemplate\"\n        },\n        {\n   " +
                    "       \"type\": \"folder\",\n          \"name\": \"src\",\n          \"content\": [\n       " +
                    "     {\n              \"type\": \"folder\",\n              \"name\": \"{{ProjectName}}.En" +
                    "tities\",\n              \"content\": [\n                {\n                  \"type\": " +
                    "\"file\",\n                  \"name\": \"{{ProjectName}}.Entities.csproj\",\n           " +
                    "       \"templateName\": \"EntityProjectTemplate\"\n                }\n              ]" +
                    "\n            },\n            {\n              \"type\": \"folder\",\n              \"nam" +
                    "e\": \"{{ProjectName}}.DataTransferObjects\",\n              \"content\": [\n          " +
                    "      {\n                  \"type\": \"file\",\n                  \"name\": \"{{ProjectNa" +
                    "me}}.DataTransferObjects.csproj\",\n                  \"templateName\": \"DtoProjectT" +
                    "emplate\"\n                }\n              ]\n            },\n            {\n        " +
                    "      \"type\": \"folder\",\n              \"name\": \"{{ProjectName}}.Services\",\n      " +
                    "        \"content\": [\n                {\n                  \"type\": \"file\",\n       " +
                    "           \"name\": \"{{ProjectName}}.Services.csproj\",\n                  \"templat" +
                    "eName\": \"ServiceProjectTemplate\"\n                }\n              ]\n            }" +
                    ",\n            {\n              \"type\": \"folder\",\n              \"name\": \"{{Project" +
                    "Name}}.Shared\",\n              \"content\": [\n                {\n                  \"" +
                    "type\": \"file\",\n                  \"name\": \"{{ProjectName}}.Shared.csproj\",\n      " +
                    "            \"templateName\": \"SharedProjectTemplate\"\n                }\n          " +
                    "    ]\n            },\n            {\n              \"type\": \"folder\",\n             " +
                    " \"name\": \"{{ProjectName}}.Tests\",\n              \"content\": [\n                {\n " +
                    "                 \"type\": \"file\",\n                  \"name\": \"{{ProjectName}}.Test" +
                    "s.csproj\",\n                  \"templateName\": \"TestsProjectTemplate\"\n            " +
                    "    }\n              ]\n            },\n            {\n              \"type\": \"folder" +
                    "\",\n              \"name\": \"{{ProjectName}}\",\n              \"content\": [\n         " +
                    "       {\n                  \"type\": \"folder\",\n                  \"name\": \"Controll" +
                    "ers\",\n                  \"content\": [\n                    {\n                     " +
                    " \"type\": \"folder\",\n                      \"name\": \"API\"\n                    },\n  " +
                    "                  {\n                      \"type\": \"folder\",\n                    " +
                    "  \"name\": \"MVC\",\n                      \"content\": [\n                        {\n  " +
                    "                        \"type\": \"folder\",\n                          \"name\": \"Adm" +
                    "in\",\n                          \"content\": [\n                            {\n      " +
                    "                        \"type\": \"file\",\n                              \"name\": \"A" +
                    "dminDashboardController.cs\",\n                              \"templateName\": \"Admi" +
                    "nDashboardControllerTemplate\"\n                            }\n                    " +
                    "      ]\n                        },\n                        {\n                   " +
                    "       \"type\": \"file\",\n                          \"name\": \"HomeController.cs\",\n  " +
                    "                        \"templateName\": \"HomeControllerTemplate\"\n               " +
                    "         }\n                      ]\n                    }\n                  ]\n   " +
                    "             },\n                {\n                  \"type\": \"folder\",\n          " +
                    "        \"name\": \"DataAccess\",\n                  \"content\": [\n                   " +
                    " {\n                      \"type\": \"file\",\n                      \"name\": \"EntityCo" +
                    "ntext.cs\",\n                      \"templateName\": \"EntityContextTemplate\"\n       " +
                    "             },\n                    {\n                      \"type\": \"file\",\n    " +
                    "                  \"name\": \"StandardRepository.cs\",\n                      \"templa" +
                    "teName\": \"StandardRepositoryTemplate\"\n                    }\n                  ]\n" +
                    "                },\n                {\n                  \"type\": \"folder\",\n       " +
                    "           \"name\": \"Migrations\",\n                  \"content\": [\n\n               " +
                    "   ]\n                },\n                {\n                  \"type\": \"folder\",\n  " +
                    "                \"name\": \"privateroot\",\n                  \"content\": [\n          " +
                    "          {\n                      \"type\": \"folder\",\n                      \"name\"" +
                    ": \"uploads\",\n                      \"content\": [\n                        {\n      " +
                    "                    \"type\": \"folder\",\n                          \"name\": \"global\"" +
                    "\n                        },\n                        {\n                          " +
                    "\"type\": \"folder\",\n                          \"name\": \"temp\"\n                     " +
                    "   },\n                        {\n                          \"type\": \"folder\",\n    " +
                    "                      \"name\": \"users\"\n                        }\n                " +
                    "      ]\n                    },\n                    {\n                      \"type" +
                    "\": \"file\",\n                      \"name\": \"config.json\",\n                      \"t" +
                    "emplateName\": \"PrivateConfigTemplate\"\n                    }\n                  ]\n" +
                    "                },\n                {\n                  \"type\": \"folder\",\n       " +
                    "           \"name\": \"Properties\",\n                  \"content\": [\n                " +
                    "    {\n                      \"type\": \"file\",\n                      \"name\": \"launc" +
                    "hSettings.json\",\n                      \"templateName\": \"LaunchSettingsTemplate\"\n" +
                    "                    }\n                  ]\n                },\n                {\n " +
                    "                 \"type\": \"folder\",\n                  \"name\": \"Scripts\",\n        " +
                    "          \"content\": [\n                  ]\n                },\n                {\n" +
                    "                  \"type\": \"folder\",\n                  \"name\": \"Styles\",\n        " +
                    "          \"content\": [\n                    {\n                      \"type\": \"fold" +
                    "er\",\n                      \"name\": \"css\",\n                      \"content\": [\n\n  " +
                    "                    ]\n                    },\n                    {\n             " +
                    "         \"type\": \"folder\",\n                      \"name\": \"scss\",\n               " +
                    "       \"content\": [\n                        {\n                          \"type\": " +
                    "\"file\",\n                          \"name\": \"_misc.scss\",\n                        " +
                    "  \"templateName\": \"ScssMiscTemplate\"\n                        },\n                " +
                    "        {\n                          \"type\": \"file\",\n                          \"n" +
                    "ame\": \"_variables.scss\",\n                          \"templateName\": \"ScssVariable" +
                    "sTemplate\"\n                        },\n                        {\n                " +
                    "          \"type\": \"file\",\n                          \"name\": \"style.scss\",\n      " +
                    "                    \"templateName\": \"ScssStyleTemplate\"\n                        " +
                    "}\n                      ]\n                    }\n                  ]\n            " +
                    "    },\n                {\n                  \"type\": \"folder\",\n                  \"" +
                    "name\": \"Views\",\n                  \"content\": [\n                    {\n           " +
                    "           \"type\": \"folder\",\n                      \"name\": \"AreasViews\",\n       " +
                    "               \"content\": [\n                        {\n                          " +
                    "\"type\": \"folder\",\n                          \"name\": \"Admin\",\n                   " +
                    "       \"content\": [\n                            {\n                              " +
                    "\"type\": \"folder\",\n                              \"name\": \"AdminDashboard\",\n      " +
                    "                        \"content\": [\n                                {\n         " +
                    "                         \"type\": \"file\",\n                                  \"name" +
                    "\": \"Index.cshtml\",\n                                  \"templateName\": \"AdminDashb" +
                    "oardIndexViewTemplate\"\n                                }\n                       " +
                    "       ]\n                            },\n                            {\n          " +
                    "                    \"type\": \"file\",\n                              \"name\": \"_View" +
                    "Imports.cshtml\",\n                              \"templateName\": \"AdminAreaViewImp" +
                    "ortsTemplate\"\n                            },\n                            {\n     " +
                    "                         \"type\": \"file\",\n                              \"name\": \"" +
                    "_ViewStart.cshtml\",\n                              \"templateName\": \"AdminAreaView" +
                    "StartTemplate\"\n                            }\n                          ]\n       " +
                    "                 }\n                      ]\n                    },\n              " +
                    "      {\n                      \"type\": \"folder\",\n                      \"name\": \"C" +
                    "omponents\",\n                      \"content\": [\n                      ]\n         " +
                    "           },\n                    {\n                      \"type\": \"folder\",\n    " +
                    "                  \"name\": \"ControllersViews\",\n                      \"content\": [" +
                    "\n                        {\n                          \"type\": \"folder\",\n         " +
                    "                 \"name\": \"Home\",\n                          \"content\": [\n        " +
                    "                    {\n                              \"type\": \"file\",\n            " +
                    "                  \"name\": \"Index.cshtml\",\n                              \"templat" +
                    "eName\": \"HomeIndexViewTemplate\"\n                            }\n                  " +
                    "        ]\n                        },\n                        {\n                 " +
                    "         \"type\": \"folder\",\n                          \"name\": \"Shared\",\n         " +
                    "                 \"content\": [\n                            {\n                    " +
                    "          \"type\": \"file\",\n                              \"name\": \"_BaseLayout.csh" +
                    "tml\",\n                              \"templateName\": \"ViewLayoutTemplate\"\n       " +
                    "                     }\n                          ]\n                        },\n  " +
                    "                      {\n                          \"type\": \"file\",\n              " +
                    "            \"name\": \"_ViewImports.cshtml\",\n                          \"templateNa" +
                    "me\": \"ViewImportsTemplate\"\n                        },\n                        {\n" +
                    "                          \"type\": \"file\",\n                          \"name\": \"_Vi" +
                    "ewStart.cshtml\",\n                          \"templateName\": \"ViewStartTemplate\"\n " +
                    "                       }\n                      ]\n                    },\n        " +
                    "            {\n                      \"type\": \"folder\",\n                      \"nam" +
                    "e\": \"EmailViews\"\n                    }\n                  ]\n                },\n  " +
                    "              {\n                  \"type\": \"folder\",\n                  \"name\": \"w" +
                    "wwroot\",\n                  \"content\": [\n                    {\n                  " +
                    "    \"type\": \"folder\",\n                      \"name\": \"assets\",\n                  " +
                    "    \"content\": [\n                        {\n                          \"type\": \"fo" +
                    "lder\",\n                          \"name\": \"css\"\n                        },\n      " +
                    "                  {\n                          \"type\": \"folder\",\n                " +
                    "          \"name\": \"images\",\n                          \"content\": [\n\n            " +
                    "              ]\n                        }\n                      ]\n              " +
                    "      },\n                    {\n                      \"type\": \"folder\",\n         " +
                    "             \"name\": \"content\",\n                      \"content\": [\n             " +
                    "           {\n                          \"type\": \"folder\",\n                       " +
                    "   \"name\": \"global\"\n                        },\n                        {\n       " +
                    "                   \"type\": \"folder\",\n                          \"name\": \"users\"\n " +
                    "                       }\n                      ]\n                    },\n        " +
                    "            {\n                      \"type\": \"folder\",\n                      \"nam" +
                    "e\": \"locales\",\n                      \"content\": [\n                        {\n    " +
                    "                      \"type\": \"file\",\n                          \"name\": \"en.json" +
                    "\",\n                          \"templateName\": \"EmptyJsonTemplate\"\n               " +
                    "         }\n                      ]\n                    }\n                  ]\n   " +
                    "             },\n                {\n                  \"type\": \"file\",\n            " +
                    "      \"name\": \"{{ProjectName}}.csproj\",\n                  \"templateName\": \"Proje" +
                    "ctFileTemplate\"\n                },\n                {\n                  \"type\": \"" +
                    "file\",\n                  \"name\": \"appsettings.json\",\n                  \"template" +
                    "Name\": \"AppSettingsTemplate\"\n                },\n                {\n              " +
                    "    \"type\": \"file\",\n                  \"name\": \"appsettings.Development.json\",\n  " +
                    "                \"templateName\": \"AppSettingsTemplate\"\n                },\n       " +
                    "         {\n                  \"type\": \"file\",\n                  \"name\": \"appsetti" +
                    "ngs.Sample.json\",\n                  \"templateName\": \"AppSettingsTemplate\"\n      " +
                    "          },\n                {\n                  \"type\": \"file\",\n               " +
                    "   \"name\": \"adminmenus.json\",\n                  \"templateName\": \"AdminMenusTempl" +
                    "ate\"\n                },\n                {\n                  \"type\": \"file\",\n    " +
                    "              \"name\": \"package.json\",\n                  \"templateName\": \"Package" +
                    "JsonTemplate\"\n                },\n                {\n                  \"type\": \"fi" +
                    "le\",\n                  \"name\": \"gulpfile.js\",\n                  \"templateName\": " +
                    "\"GulpFileTemplate\"\n                },\n                {\n                  \"type\"" +
                    ": \"file\",\n                  \"name\": \"Program.cs\",\n                  \"templateNam" +
                    "e\": \"ProgramTemplate\"\n                },\n                {\n                  \"ty" +
                    "pe\": \"file\",\n                  \"name\": \"Startup.cs\",\n                  \"template" +
                    "Name\": \"StartupTemplate\"\n                }\n              ]\n            }\n       " +
                    "   ]\n        }\n      ]\n    }\n  ]\n}\n");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ProjectInitSchemeBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
